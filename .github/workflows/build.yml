name: DeployTest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  versionning:
    name: Versionning
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }}-pre --dev-branch=main)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION : $VERSION"
        RELEASE=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }} --dev-branch=main)
        echo "release=$RELEASE" >> $GITHUB_OUTPUT
        echo "RELEASE : $RELEASE"
        echo "Version :" >> $GITHUB_STEP_SUMMARY
        echo "$VERSION" >> $GITHUB_STEP_SUMMARY
        echo "Release :" >> $GITHUB_STEP_SUMMARY
        echo "$RELEASE" >> $GITHUB_STEP_SUMMARY

  format:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        submodules: true

    - name: Install ReSharper
      run: |
        dotnet tool install -g JetBrains.ReSharper.GlobalTools --version 2022.2.2

    - name: Restore
      run: |
        dotnet restore ArmoniK.Extensions.Csharp.sln

    - name: Reformat
      run: |
        jb cleanupcode --exclude="**.props" ArmoniK.Extensions.Csharp.sln

    - name: Check Diff
      run: |
        DIFF="$(git diff --name-only)"

        if [ -z "$DIFF" ]; then
          echo "OK: Format is clean"
        else
          echo "Error: Format was not clean"
          echo "List of files:"
          echo "$DIFF"
          git diff
          exit 1
        fi

  buildProjects:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      GENVERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Build the package
      run: |
        dotnet build ArmoniK.Extensions.Csharp.sln -c Release -p:Version=$GENVERSION

    - name: Pack the package VERSION
      run: |
        dotnet pack ArmoniK.Extensions.Csharp.sln -c Release -o /tmp/packages -p:Version=$GENVERSION
        
    - name: Push the package
      run: |
        find /tmp/packages -name 'ArmoniK*.nupkg' ! -name '*test*.nupkg' -exec dotnet nuget push {} -k ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols \;

  buildWorkerEnd2End:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

    - name: build
      run: |
        docker build -t dockerhubaneo/armonik_worker_dll:$VERSION -f Worker/src/DLLWorker/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_worker_dll:$VERSION

  buildImagesCross:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildWorkerEnd2End
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
      with:
        ref: ${{ github.ref }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2

    - name: login
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      with:
        username: ${{ secrets.DOCKER_HUB_LOGIN }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build and push
      uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
      with:
        file: Worker/src/DLLWorker/Dockerfile
        context: .
        platforms: linux/arm64
        push: true
        tags: |
            dockerhubaneo/armonik_worker_dll:${{ needs.versionning.outputs.version }}-arm

    - name: Create multi-arch manifest
      run: docker buildx imagetools create dockerhubaneo/armonik_worker_dll:${VERSION} --tag dockerhubaneo/armonik_worker_dll:${VERSION} --append dockerhubaneo/armonik_worker_dll:${VERSION}-arm

  testEndToEnd:
    needs:
      - versionning
      - buildProjects
      - buildWorkerEnd2End
    strategy:
      fail-fast: false
      matrix:
        tls: [true, false]
        mtls: [true, false]
        sslvalidation : [enable, disable]
        useca : [true, false]
        exclude: 
          - sslvalidation : enable
            tls : false
          - tls: false
            mtls: true
          - useca: true 
            sslvalidation : disable
    name: "End2End tls:${{ matrix.tls }} mtls:${{ matrix.mtls }} val:${{ matrix.sslvalidation }} ca:${{ matrix.useca }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          ref: ${{ github.ref }}

      - name: Install Dependencies
        uses: aneoconsulting/ArmoniK.Action.Deploy/dependencies@main
        with:
           docker: true
           terraform: true
           k3s: true
           aws: true

      - name: Checkout Infra
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: aneoconsulting/ArmoniK
          path: infra

      - id: deploy
        name: Deploy
        uses: aneoconsulting/ArmoniK.Action.Deploy/deploy@main
        with:
          working-directory: ${{ github.workspace }}/infra
          type: localhost
          tls: ${{ matrix.tls }}
          mtls: ${{ matrix.mtls }}
          ext-csharp-version: ${{ needs.versionning.outputs.version }}
          core-version: 0.14.0-SNAPSHOT.138.2c9f7407

      - name: Setup hosts file
        run : echo -e "$(kubectl get svc ingress -n armonik -o jsonpath={.status.loadBalancer.ingress[0].ip})\tarmonik.local" | sudo tee -a /etc/hosts

      - name: Add CA to store
        if: ${{ (matrix.sslvalidation == 'enable') && (matrix.useca == false) }}
        run: |
         sudo apt install ca-certificates
         sudo mkdir -p /usr/local/share/ca-certificates/
         sudo cp ${{ steps.deploy.outputs.generated-folder }}/certificates/ingress/ca.crt /usr/local/share/ca-certificates/ca.crt
         sudo update-ca-certificates

      - name: Build and deploy EndToEnd.Tests
        timeout-minutes: 15
        run: |
         cd Tests
         mkdir -p ${HOME}/data
         bash -x ./endToEndTests.sh -b -d
         cd -
      
      - name: Run tests
        timeout-minutes: 18
        run: |
         set -ex
         kubectl get svc -n armonik -o wide
         export CPPort=$(kubectl get svc ingress -n armonik -o custom-columns="PORT:.spec.ports[1].port" --no-headers=true)
         if [ "${{ matrix.tls }}" = "true" ]; then
          export Grpc__Endpoint=https://armonik.local:$CPPort
         else
          export Grpc__Endpoint=http://armonik.local:$CPPort
         fi
         export Grpc__SSLValidation=${{ matrix.sslvalidation }}
         if [ "${{ matrix.useca }}" = "true" ]; then
          export Grpc__CaCert="${{ steps.deploy.outputs.generated-folder }}/certificates/ingress/ca.crt"
         fi
         if [ "${{ matrix.mtls }}" = "true" ]; then
          export Grpc__ClientP12="${{ steps.deploy.outputs.generated-folder }}/certificates/ingress/client.submitter.p12"
         fi
         dotnet test --runtime linux-x64 -f net6.0 --logger "trx;LogFileName=test-results.trx"
         
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: "IntegrationTests tls:${{ matrix.tls }} mtls:${{ matrix.mtls }} val:${{ matrix.sslvalidation }} ca:${{ matrix.useca }}"
          path: ./Tests/ArmoniK.EndToEndTests/ArmoniK.EndToEndTests.Client/TestResults/test-results.trx
          reporter: dotnet-trx
    
      - name: Destroy deployment
        if: success() || failure()
        uses: aneoconsulting/ArmoniK.Action.Deploy/destroy@main
        with:
          working-directory: ${{ github.workspace }}/infra
          type: localhost

  canMerge:
    needs: 
      - testEndToEnd
      - format
    runs-on: ubuntu-latest
    steps:
      - name: Echo OK
        run: echo OK
